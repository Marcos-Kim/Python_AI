# -*- coding: utf-8 -*-
"""Redes Neurais.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15twrHFo-jgWt_SmpwfnHigeNL-c9e7Rr
"""

# Importar bibliotecas
import pandas as pd
import random
from sklearn.model_selection import train_test_split
from tensorflow.keras import models, layers
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder

# Definir o número de imóveis
num_imoveis = 1000

# Criar listas com tamanho fixo
area_total = [random.uniform(50, 150) for _ in range(num_imoveis)]
qtd_quartos = [random.randint(2, 5) for _ in range(num_imoveis)]
qtd_banheiros = [random.randint(1, 4) for _ in range(num_imoveis)]
vagas_garagem = [random.randint(0, 3) for _ in range(num_imoveis)]
valor = [random.uniform(200000, 1000000) for _ in range(num_imoveis)]

# Garantir que todas as listas tenham o mesmo tamanho
min_length = min(len(area_total), len(qtd_quartos), len(qtd_banheiros), len(vagas_garagem), len(valor))
for l in [area_total, qtd_quartos, qtd_banheiros, vagas_garagem, valor]:
    while len(l) > min_length:
        l.pop()

# Criar listas de características categóricas repetidas para alcançar o tamanho num_imoveis
titulos = ['Casa Ampla com Quintal', 'Apartamento Moderno', 'Cobertura Duplex', 'Sobrado com Piscina']
bairros = ['Centro', 'Jardim Europa', 'Vila Nova', 'Alphaville']
cidades = ['São Paulo', 'Campinas', 'Santos', 'Ribeirão Preto']
estados = ['SP', 'RJ', 'MG', 'RS']

# Repetir as listas até alcançar o tamanho necessário
titulo = [random.choice(titulos) for _ in range(num_imoveis)]
bairro = [random.choice(bairros) for _ in range(num_imoveis)]
cidade = [random.choice(cidades) for _ in range(num_imoveis)]
estado = [random.choice(estados) for _ in range(num_imoveis)]

# Criar dicionário de características
caracteristicas = {
    'titulo': titulo,
    'area_total': area_total,
    'qtd_quartos': qtd_quartos,
    'qtd_banheiros': qtd_banheiros,
    'vagas_garagem': vagas_garagem,
    'bairro': bairro,
    'cidade': cidade,
    'estado': estado,
    'valor': valor
}

# Criar DataFrame
dados = pd.DataFrame(caracteristicas)

# Salvar DataFrame em CSV
dados.to_csv('dados_imoveis.csv', index=False)

# Carregar o conjunto de dados
dados = pd.read_csv('dados_imoveis.csv')

# Pré-processamento de dados
# Normalizar valores numéricos
scaler = MinMaxScaler()
dados_normalizados = scaler.fit_transform(dados[['area_total', 'qtd_quartos', 'qtd_banheiros', 'vagas_garagem']])
dados['area_total_norm'] = dados_normalizados[:, 0]
dados['qtd_quartos_norm'] = dados_normalizados[:, 1]
dados['qtd_banheiros_norm'] = dados_normalizados[:, 2]
dados['vagas_garagem_norm'] = dados_normalizados[:, 3]

# Codificar variáveis categóricas
encoder = OneHotEncoder()
dados_onehot = encoder.fit_transform(dados[['bairro', 'estado']])
dados = pd.concat([dados, pd.DataFrame(dados_onehot.toarray(), columns=encoder.get_feature_names_out())], axis=1)

# Lidar com valores ausentes
dados.dropna(inplace=True)

# Separar dados de treinamento e teste
X = dados[['area_total_norm', 'qtd_quartos_norm', 'qtd_banheiros_norm', 'vagas_garagem_norm'] + list(encoder.get_feature_names_out())]
y = dados['valor']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Construir a rede neural
model = models.Sequential([
    layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    layers.Dense(32, activation='relu'),
    layers.Dense(1)
])

model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mae'])

# Treinar a rede neural
model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2)

# Avaliar o modelo
loss, mae = model.evaluate(X_test, y_test)
print('Loss:', loss)
print('MAE:', mae)

# Fazer previsões
novo_imovel = {
    'area_total_norm': 120,
    'qtd_quartos_norm': 3,
    'qtd_banheiros_norm': 2,
    'vagas_garagem_norm': 2,
    'bairro_Centro': 1,
    'bairro_Jardim Europa': 0,
    'bairro_Vila Nova': 0,
    'bairro_Alphaville': 0,
    'estado_SP': 1,
    'estado_RJ': 0,
    'estado_MG': 0,
    'estado_RS': 0
}

# Converter novo imóvel para DataFrame
novo_imovel_df = pd.DataFrame([novo_imovel])

# Fazer a previsão
previsao = model.predict(novo_imovel_df)
print('Previsão de valor:', previsao[0][0])