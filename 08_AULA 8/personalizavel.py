# -*- coding: utf-8 -*-
"""Personalizavel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16kC0JhVu-Tbih9sOsLNWb_Gvc-xaW-0H
"""

!pip install sumy textblob transformers
!python -m textblob.download_corpora
!pip install sentencepiece
!pip install torch

from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.text_rank import TextRankSummarizer
from textblob import TextBlob
from transformers import pipeline

import nltk
nltk.download('punkt')

# Função de sumarização
def summarize_text(text, num_sentences=3):
    parser = PlaintextParser.from_string(text, Tokenizer("english"))
    summarizer = TextRankSummarizer()
    summary = summarizer(parser.document, num_sentences)
    return ' '.join(str(sentence) for sentence in summary)

# Função de análise de sentimentos
def analyze_sentiment(text):
    blob = TextBlob(text)
    sentiment = blob.sentiment
    return sentiment

# Função de tradução
def translate_text(text, target_language='fr'):
    translator = pipeline('translation', model='Helsinki-NLP/opus-mt-en-fr')
    translation = translator(text)
    return translation[0]['translation_text']

# Função de sumarização
def summarize_text(text, num_sentences=3):
    parser = PlaintextParser.from_string(text, Tokenizer("english"))
    summarizer = TextRankSummarizer()
    summary = summarizer(parser.document, num_sentences)
    return ' '.join(str(sentence) for sentence in summary)

# Função de análise de sentimentos
def analyze_sentiment(text):
    blob = TextBlob(text)
    sentiment = blob.sentiment
    return sentiment

# Função de tradução
def translate_text(text, target_language='fr'):
    translator = pipeline('translation', model='Helsinki-NLP/opus-mt-en-fr')
    translation = translator(text)
    return translation[0]['translation_text']

from IPython.display import display
import ipywidgets as widgets

# Função para exibir a interface
def interactive_ai_tool():
    text_area = widgets.Textarea(
        value='',
        placeholder='Digite ou cole o texto aqui...',
        description='Texto:',
        layout=widgets.Layout(width='100%', height='100px')
    )

    num_sentences_slider = widgets.IntSlider(
        value=3,
        min=1,
        max=10,
        step=1,
        description='Sentenças:',
        continuous_update=False
    )

    target_language_dropdown = widgets.Dropdown(
        options=['fr', 'es', 'de', 'it', 'pt'],
        value='fr',
        description='Idioma:'
    )

    action_buttons = widgets.ToggleButtons(
        options=['Sumarizar', 'Sentimento', 'Traduzir'],
        description='Ação:'
    )

    output_area = widgets.Output()

    def on_button_click(change):
        with output_area:
            output_area.clear_output()
            text = text_area.value
            if action_buttons.value == 'Sumarizar':
                summary = summarize_text(text, num_sentences_slider.value)
                print("Resumo:\n", summary)
            elif action_buttons.value == 'Sentimento':
                sentiment = analyze_sentiment(text)
                print("Sentimento:\n", sentiment)
            elif action_buttons.value == 'Traduzir':
                translation = translate_text(text, target_language_dropdown.value)
                print("Tradução:\n", translation)

    action_buttons.observe(on_button_click, names='value')

    display(widgets.VBox([
        text_area,
        action_buttons,
        num_sentences_slider,
        target_language_dropdown,
        output_area
    ]))

# Executar a interface interativa
interactive_ai_tool()