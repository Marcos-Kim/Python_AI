# -*- coding: utf-8 -*-
"""eduardo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V7h-HAFjeXigY_89Q35jJdJiISaXKcPf
"""

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.datasets import cifar10
import matplotlib.pyplot as plt

# Carregar o conjunto de dados CIFAR-10
(train_images, train_labels), (test_images, test_labels) = cifar10.load_data()

# Normalizar as imagens
train_images, test_images = train_images / 255.0, test_images / 255.0

# Carregar o modelo pré-treinado MobileNetV2, excluindo as camadas de classificação
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(32, 32, 3))

# Congelar as camadas do modelo base
base_model.trainable = False

# Adicionar novas camadas para a classificação
model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(128, activation='relu'),
    layers.Dense(10, activation='softmax')
])

# Compilar o modelo
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Treinar o modelo
history = model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))

# Avaliar o modelo
test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f'Test accuracy: {test_acc}')

# Visualizar resultados
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()

# Previsões em imagens de teste
predictions = model.predict(test_images)

# Mostrar algumas previsões
import numpy as np
def plot_image(i, predictions_array, true_label, img):
  predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])

  plt.imshow(img, cmap=plt.cm.binary)

  predicted_label = np.argmax(predictions_array)
  if predicted_label == true_label:
    color = 'blue'
  else:
    color = 'red'

  plt.xlabel(f"{class_names[predicted_label]} {100*np.max(predictions_array):2.0f}% (True: {class_names[true_label[0]]})", color=color)

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

# Plotar as primeiras X imagens, suas previsões e os rótulos verdadeiros
# Colocar as previsões corretas em azul e as incorretas em vermelho
num_rows = 5
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2*num_cols, 2*i+1)
  plot_image(i, predictions, test_labels, test_images)
plt.show()